interface TelegramMessage {
  name?: string;
  company?: string;
  role?: string;
  email: string;
  phone?: string;
  interest?: string;
  comment?: string;
  goal?: string;
  type: 'b2b' | 'b2c';
}

export async function sendTelegramNotification(data: TelegramMessage): Promise<void> {
  const botToken = import.meta.env.TELEGRAM_BOT_TOKEN;
  const chatId = import.meta.env.TELEGRAM_CHAT_ID;

  if (!botToken || !chatId) {
    console.error('Telegram credentials not configured');
    return;
  }

  let message = 'üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n';
  
  if (data.type === 'b2b') {
    message += `üìä *–¢–∏–ø:* –ë–∏–∑–Ω–µ—Å\n`;
    message += `üë§ *–ò–º—è:* ${data.name || '-'}\n`;
    message += `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${data.company || '-'}\n`;
    message += `üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* ${data.role || '-'}\n`;
    message += `üìß *Email:* ${data.email}\n`;
    message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone || '-'}\n`;
    message += `üéØ *–ò–Ω—Ç–µ—Ä–µ—Å:* ${formatInterest(data.interest)}\n`;
    if (data.comment) {
      message += `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${data.comment}\n`;
    }
  } else {
    message += `üìä *–¢–∏–ø:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n`;
    message += `üìß *Email:* ${data.email}\n`;
    message += `üéØ *–¶–µ–ª—å:* ${formatGoal(data.goal)}\n`;
  }

  message += `\n‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Telegram API error:', error);
    }
  } catch (error) {
    console.error('Failed to send Telegram notification:', error);
  }
}

function formatInterest(interest?: string): string {
  const interests: Record<string, string> = {
    demo: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    enterprise: 'Enterprise —Ä–µ—à–µ–Ω–∏–µ',
    course_box: '–ö–æ—Ä–æ–±–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–æ–≤',
  };
  return interests[interest || ''] || interest || '-';
}

function formatGoal(goal?: string): string {
  const goals: Record<string, string> = {
    courses: '–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤',
    content: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    development: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
    research: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    other: '–î—Ä—É–≥–æ–µ',
  };
  return goals[goal || ''] || goal || '-';
}