/**
 * SberCRM Webhook –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
 */
class SberCRMClient {
  constructor(webhookId) {
    this.webhookUrl = `https://app.sbercrm.com/react-gateway/api/webhook/${webhookId}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ webhook
   */
  async submitLead(leadData) {
    const response = await fetch(this.webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'CogneeX Landing Page',
      },
      body: JSON.stringify(leadData),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('SberCRM Webhook Error:', error);
      throw new Error(`SberCRM Webhook Error: ${response.status} ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook
   */
  async testWebhook() {
    try {
      const response = await fetch(this.webhookUrl, {
        method: 'OPTIONS',
      });

      return {
        available: response.status < 400,
        status: response.status,
        url: this.webhookUrl,
      };
    } catch (error) {
      return {
        available: false,
        error: error.message,
        url: this.webhookUrl,
      };
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ SberCRM —á–µ—Ä–µ–∑ webhook
 */
export async function submitLeadToSberCRM(formData) {
  const webhookId = import.meta.env.PUBLIC_SBERCRM_WEBHOOK_ID;

  if (!webhookId) {
    throw new Error('SberCRM Webhook ID not configured');
  }

  const client = new SberCRMClient(webhookId);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ SberCRM
  const leadData = {
    name: `${formData.type === 'b2b' ? 'B2B' : 'B2C'} –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ CogneeX`,
    description: buildDescription(formData),
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
  function buildDescription(formData) {
    const parts = [];

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    parts.push(`–¢–∏–ø –∑–∞—è–≤–∫–∏: ${formData.type === 'b2b' ? 'B2B' : 'B2C'}`);

    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (formData.name) {
      parts.push(`–ò–º—è: ${formData.name}`);
    }

    if (formData.email) {
      parts.push(`Email: ${formData.email}`);
    }

    if (formData.phone) {
      parts.push(`–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}`);
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–ª—è B2B)
    if (formData.company) {
      parts.push(`–ö–æ–º–ø–∞–Ω–∏—è: ${formData.company}`);
    }

    if (formData.role) {
      parts.push(`–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${formData.role}`);
    }

    if (formData.employees) {
      parts.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${formData.employees}`);
    }

    // –¶–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    if (formData.goal) {
      parts.push(`–¶–µ–ª—å: ${formData.goal}`);
    }

    if (formData.interest) {
      parts.push(`–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ${formData.interest}`);
    }

    if (formData.comment || formData.needs) {
      parts.push(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.comment || formData.needs}`);
    }

    // UTM –º–µ—Ç–∫–∏
    const utmParts = [];
    if (formData.utm_source) utmParts.push(`source: ${formData.utm_source}`);
    if (formData.utm_medium) utmParts.push(`medium: ${formData.utm_medium}`);
    if (formData.utm_campaign) utmParts.push(`campaign: ${formData.utm_campaign}`);
    if (formData.utm_term) utmParts.push(`term: ${formData.utm_term}`);
    if (formData.utm_content) utmParts.push(`content: ${formData.utm_content}`);

    if (utmParts.length > 0) {
      parts.push(`UTM: ${utmParts.join(', ')}`);
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    parts.push(`–ò—Å—Ç–æ—á–Ω–∏–∫: ${formData.source || window.location.href}`);
    parts.push(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);
    parts.push(`User Agent: ${navigator.userAgent}`);

    return parts.join('\n');
  }

  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ SberCRM —á–µ—Ä–µ–∑ webhook:', leadData);

  try {
    const result = await client.submitLead(leadData);
    console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ SberCRM:', result);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return {
      success: true,
      data: result,
      // –≠–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
      _embedded: {
        leads: [
          {
            id: result.id || Date.now(), // ID –ª–∏–¥–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
          },
        ],
      },
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏–¥–∞ –≤ SberCRM:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
 */
export async function sendTelegramNotification(data, leadId) {
  const botToken = import.meta.env.PUBLIC_TELEGRAM_BOT_TOKEN;
  const chatId = import.meta.env.PUBLIC_TELEGRAM_CHAT_ID;

  if (!botToken || !chatId || botToken === 'your-bot-token') {
    console.warn('Telegram credentials not configured');
    return;
  }

  const message = formatTelegramMessage(data, leadId);

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error sending Telegram notification:', error);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
 */
function formatTelegramMessage(data, leadId) {
  const type = data.type === 'b2b' ? 'üè¢ B2B' : 'üë§ B2C';
  const timestamp = new Date().toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
  });

  let message = `${type} *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ CogneeX*\n\n`;
  message += `üìÖ *–í—Ä–µ–º—è:* ${timestamp}\n`;

  if (leadId) {
    message += `üÜî *ID –ª–∏–¥–∞:* \`${leadId}\`\n`;
  }

  message += `üë§ *–ò–º—è:* ${data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
  message += `üìß *Email:* ${data.email}\n`;

  if (data.phone) {
    message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}\n`;
  }

  if (data.type === 'b2b') {
    if (data.company) message += `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${data.company}\n`;
    if (data.role) message += `üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* ${data.role}\n`;
    if (data.employees) message += `üë• *–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:* ${data.employees}\n`;
    if (data.needs || data.comment) {
      message += `\nüí¨ *–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:*\n${data.needs || data.comment}\n`;
    }
  } else {
    if (data.goal) message += `üéØ *–¶–µ–ª—å:* ${data.goal}\n`;
  }

  // UTM –º–µ—Ç–∫–∏
  const utmParams = [];
  if (data.utm_source) utmParams.push(`source: ${data.utm_source}`);
  if (data.utm_medium) utmParams.push(`medium: ${data.utm_medium}`);
  if (data.utm_campaign) utmParams.push(`campaign: ${data.utm_campaign}`);

  if (utmParams.length > 0) {
    message += `\nüìä *UTM:* ${utmParams.join(', ')}\n`;
  }

  // –°—Å—ã–ª–∫–∞ –Ω–∞ SberCRM (–µ—Å–ª–∏ –µ—Å—Ç—å ID)
  if (leadId && import.meta.env.PUBLIC_SBERCRM_DOMAIN) {
    message += `\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤ SberCRM](https://${import.meta.env.PUBLIC_SBERCRM_DOMAIN}.sbercrm.ru/leads/detail/${leadId})`;
  }

  return message;
}

export { SberCRMClient };
