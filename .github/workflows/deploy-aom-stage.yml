name: Build and Push to GHCR

on:
  workflow_dispatch:
  push: 
    branches: ['aicourse-dev']
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=stage

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SCRIPT_YANDEX_METRICA_ID=${{ vars.SCRIPT_YANDEX_METRICA_ID }}
            VITE_BILLING_API_URL=https://skatoolka-stage-backend.aom-tech.ru
            NODE_ENV=production 

      - name: run docker compose
        uses: appleboy/ssh-action@master
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ github.repository_owner }}
        with:
          host: ${{ secrets.DEPLOY_HOST_STAGE }}
          username: ${{ secrets.DEPLOY_USERNAME_STAGE }}
          key: ${{ secrets.DEPLOY_KEY_STAGE }}
          envs: TOKEN, USERNAME
          script: |
            cd ~/LibreChat

            echo $TOKEN | docker login ghcr.io -u $USERNAME --password-stdin

            OLD_IMAGE=$(docker images -q g${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stage 2>/dev/null || true)

            docker-compose build
            docker-compose pull api
            docker-compose stop -t 1 api
            docker-compose up -d api
            
            # Удалить только старый образ, если он существует
            if [ ! -z "$OLD_IMAGE" ]; then
              docker rmi $OLD_IMAGE 2>/dev/null || true
            fi